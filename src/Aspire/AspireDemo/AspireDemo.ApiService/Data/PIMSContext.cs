// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using AspireDemo.ApiService.Data.Models;

namespace AspireDemo.ApiService.Data;

public partial class PIMSContext : DbContext
{
    public PIMSContext(DbContextOptions<PIMSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<VPM> VPM { get; set; }

    public virtual DbSet<VPMEvent> VPMEvent { get; set; }

    public virtual DbSet<VPMEventType> VPMEventType { get; set; }

    public virtual DbSet<VPMGps> VPMGps { get; set; }

    public virtual DbSet<VPMGpsType> VPMGpsType { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<VPM>(entity =>
        {
            entity.ToTable("VPM", "pipelines");

            entity.HasIndex(e => e.Rid, "IX_VPM_Rid").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasDefaultValue("#FF8C00");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VPMEvent>(entity =>
        {
            entity.ToTable("VPMEvent", "pipelines");

            entity.HasOne(d => d.VPMEventType).WithMany(p => p.VPMEvent)
                .HasForeignKey(d => d.VPMEventTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VPMEvent_VPMEventType");

            entity.HasOne(d => d.VPM).WithMany(p => p.VPMEvent)
                .HasForeignKey(d => d.VPMId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VPMEvent_VPM");
        });

        modelBuilder.Entity<VPMEventType>(entity =>
        {
            entity.ToTable("VPMEventType", "pipelines");

            entity.HasIndex(e => e.Description, "IX_VPMEventType_Description").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VPMGps>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.VPMId });

            entity.ToTable("VPMGps", "pipelines");

            entity.Property(e => e.Description).HasMaxLength(50);

            entity.HasOne(d => d.VPMGpsType).WithMany(p => p.VPMGps)
                .HasForeignKey(d => d.VPMGpsTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VPMGps_VPMGpsType");

            entity.HasOne(d => d.VPM).WithMany(p => p.VPMGps)
                .HasForeignKey(d => d.VPMId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VPMGps_VPM");
        });

        modelBuilder.Entity<VPMGpsType>(entity =>
        {
            entity.ToTable("VPMGpsType", "pipelines");

            entity.HasIndex(e => e.Description, "IX_VPMGpsType_Description").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}